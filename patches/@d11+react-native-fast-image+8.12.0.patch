diff --git a/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java b/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java
index 86ee08e..3c2940c 100644
--- a/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java
+++ b/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageSource.java
@@ -104,6 +104,10 @@ public class FastImageSource {
     }
 
     public GlideUrl getGlideUrl() {
+        Uri uriVal = getUri();
+        if (Uri.EMPTY.equals(uriVal)) {
+            return null;
+        }
         return new GlideUrl(getUri().toString(), getHeaders());
     }
 
diff --git a/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModuleImplementation.java b/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModuleImplementation.java
index 0bbaece..6758ed8 100644
--- a/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModuleImplementation.java
+++ b/node_modules/@d11/react-native-fast-image/android/src/main/java/com/dylanvann/fastimage/FastImageViewModuleImplementation.java
@@ -11,6 +11,12 @@ import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.views.imagehelper.ImageSource;
 import com.facebook.react.bridge.ReactApplicationContext;
+import androidx.annotation.Nullable;
+import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
+import com.bumptech.glide.request.RequestListener;
+import com.bumptech.glide.request.target.Target;
+import java.io.File;
 
 class FastImageViewModuleImplementation {
     ReactApplicationContext reactContext;
@@ -20,6 +26,7 @@ class FastImageViewModuleImplementation {
     }
 
     public static final String REACT_CLASS = "FastImageViewModule";
+    private static final String ERROR_LOAD_FAILED = "ERROR_LOAD_FAILED";
 
     private Activity getCurrentActivity(){
         return reactContext.getCurrentActivity();
@@ -82,4 +89,42 @@ class FastImageViewModuleImplementation {
         Glide.get(activity.getApplicationContext()).clearDiskCache();
         promise.resolve(null);
     }
+
+    public void getCachePath(final ReadableMap source, final Promise promise) {
+        final Activity activity = getCurrentActivity();
+        if (activity == null) return;
+
+        activity.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                final FastImageSource imageSource = FastImageViewConverter.getImageSource(activity, source);
+                final GlideUrl glideUrl = imageSource.getGlideUrl();
+
+                if (glideUrl == null) {
+                    promise.resolve(null);
+                    return;
+                }
+
+                Glide
+                    .with(activity.getApplicationContext())
+                    .asFile()
+                    .load(glideUrl)
+                    .apply(FastImageViewConverter.getOptions(activity, imageSource,  source))
+                    .listener(new RequestListener<File>() {
+                        @Override
+                        public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<File> target, boolean isFirstResource) {
+                            promise.reject(ERROR_LOAD_FAILED, e);
+                            return false;
+                        }
+
+                        @Override
+                        public boolean onResourceReady(File resource, Object model, Target<File> target, DataSource dataSource, boolean isFirstResource) {
+                            promise.resolve(resource.getAbsolutePath());
+                            return false;
+                        }
+                    })
+                    .submit();
+            }
+        });
+    }
 }
diff --git a/node_modules/@d11/react-native-fast-image/android/src/newarch/java/com/FastImageViewModule.java b/node_modules/@d11/react-native-fast-image/android/src/newarch/java/com/FastImageViewModule.java
index c55d4bb..ae20560 100644
--- a/node_modules/@d11/react-native-fast-image/android/src/newarch/java/com/FastImageViewModule.java
+++ b/node_modules/@d11/react-native-fast-image/android/src/newarch/java/com/FastImageViewModule.java
@@ -43,4 +43,9 @@ class FastImageViewModule extends NativeFastImageViewModuleSpec {
     public void clearDiskCache(Promise promise) {
         impl.clearDiskCache(promise);
     }
+
+    @Override
+    public void getCachePath(final ReadableMap source, final Promise promise) {
+        impl.getCachePath(source, promise);
+    }
 }
diff --git a/node_modules/@d11/react-native-fast-image/android/src/oldarch/java/com/FastImageViewModule.java b/node_modules/@d11/react-native-fast-image/android/src/oldarch/java/com/FastImageViewModule.java
index 2a59c61..3155ada 100644
--- a/node_modules/@d11/react-native-fast-image/android/src/oldarch/java/com/FastImageViewModule.java
+++ b/node_modules/@d11/react-native-fast-image/android/src/oldarch/java/com/FastImageViewModule.java
@@ -43,4 +43,9 @@ class FastImageViewModule extends ReactContextBaseJavaModule {
     public void clearDiskCache(Promise promise) {
         impl.clearDiskCache(promise);
     }
+
+    @ReactMethod
+    public void getCachePath(final ReadableMap source, final Promise promise) {
+        impl.getCachePath(source, promise);
+    }
 }
diff --git a/node_modules/@d11/react-native-fast-image/dist/index.d.ts b/node_modules/@d11/react-native-fast-image/dist/index.d.ts
index be7bb96..a457320 100644
--- a/node_modules/@d11/react-native-fast-image/dist/index.d.ts
+++ b/node_modules/@d11/react-native-fast-image/dist/index.d.ts
@@ -102,6 +102,7 @@ export interface FastImageStaticProperties {
     preload: (sources: Source[]) => void;
     clearMemoryCache: () => Promise<void>;
     clearDiskCache: () => Promise<void>;
+    getCachePath: (source: Source) => Promise<string | null>;
 }
 declare const FastImage: React.ComponentType<FastImageProps> & FastImageStaticProperties;
 export default FastImage;
diff --git a/node_modules/@d11/react-native-fast-image/ios/FastImage/FFFastImageViewModule.mm b/node_modules/@d11/react-native-fast-image/ios/FastImage/FFFastImageViewModule.mm
index 554b190..5a55665 100644
--- a/node_modules/@d11/react-native-fast-image/ios/FastImage/FFFastImageViewModule.mm
+++ b/node_modules/@d11/react-native-fast-image/ios/FastImage/FFFastImageViewModule.mm
@@ -35,6 +35,29 @@ @implementation FFFastImageViewModule
         resolve(NULL);
     }];
 }
+
+RCT_EXPORT_METHOD(getCachePath:(JS::NativeFastImageViewModule::SpecGetCachePathSource &)source
+                      resolve:(RCTPromiseResolveBlock)resolve
+                       reject:(RCTPromiseRejectBlock)reject)
+{
+    NSURL *url = [NSURL URLWithString:source.uri()];
+    if (url == nil) {
+        resolve([NSNull null]);
+        return;
+    }
+
+    SDWebImageManager *imageManager = [SDWebImageManager sharedManager];
+    NSString *key = [imageManager cacheKeyForURL:url];
+    BOOL isCached = [[SDImageCache sharedImageCache] diskImageDataExistsWithKey:key];
+
+    if (isCached) {
+        NSString *cachePath = [[SDImageCache sharedImageCache] cachePathForKey:key];
+        resolve(cachePath);
+    } else {
+        resolve([NSNull null]);
+    }
+}
+
 #ifdef RCT_NEW_ARCH_ENABLED
 - (std::shared_ptr<facebook::react::TurboModule>)getTurboModule:
     (const facebook::react::ObjCTurboModule::InitParams &)params
diff --git a/node_modules/@d11/react-native-fast-image/src/NativeFastImageViewModule.ts b/node_modules/@d11/react-native-fast-image/src/NativeFastImageViewModule.ts
index d984e09..626bca2 100644
--- a/node_modules/@d11/react-native-fast-image/src/NativeFastImageViewModule.ts
+++ b/node_modules/@d11/react-native-fast-image/src/NativeFastImageViewModule.ts
@@ -6,6 +6,12 @@ export interface Spec extends TurboModule {
     preload: (sources: Source[]) => void
     clearMemoryCache: () => Promise<void>
     clearDiskCache: () => Promise<void>
+    getCachePath: (source: {
+        uri?: string
+        headers?: Readonly<{ [key: string]: string }>
+        priority?: string
+        cache?: string
+    }) => Promise<string | null>
 }
 
 export default TurboModuleRegistry.getEnforcing<Spec>('FastImageViewModule')
diff --git a/node_modules/@d11/react-native-fast-image/src/index.tsx b/node_modules/@d11/react-native-fast-image/src/index.tsx
index c4e471e..926981d 100644
--- a/node_modules/@d11/react-native-fast-image/src/index.tsx
+++ b/node_modules/@d11/react-native-fast-image/src/index.tsx
@@ -272,6 +272,7 @@ export interface FastImageStaticProperties {
     preload: (sources: Source[]) => void
     clearMemoryCache: () => Promise<void>
     clearDiskCache: () => Promise<void>
+    getCachePath: (source: Source) => Promise<string | null>
 }
 
 const FastImage: React.ComponentType<FastImageProps> &
@@ -289,6 +290,8 @@ FastImage.clearMemoryCache = () => FastImageViewModule.clearMemoryCache()
 
 FastImage.clearDiskCache = () => FastImageViewModule.clearDiskCache()
 
+FastImage.getCachePath = (source: Source) => FastImageViewModule.getCachePath(source)
+
 const styles = StyleSheet.create({
     imageContainer: {
         overflow: 'hidden',
